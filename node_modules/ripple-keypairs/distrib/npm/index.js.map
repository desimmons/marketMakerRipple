{"version":3,"sources":["../../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict' // eslint-disable-line strict\n\nconst assert = require('assert')\nconst brorand = require('brorand')\nconst hashjs = require('hash.js')\nconst elliptic = require('elliptic')\nconst Ed25519 = elliptic.eddsa('ed25519')\nconst Secp256k1 = elliptic.ec('secp256k1')\nconst addressCodec = require('ripple-address-codec')\nconst derivePrivateKey = require('./secp256k1').derivePrivateKey\nconst accountPublicFromPublicGenerator = require('./secp256k1')\n  .accountPublicFromPublicGenerator\nconst utils = require('./utils')\nconst hexToBytes = utils.hexToBytes\nconst bytesToHex = utils.bytesToHex\n\nfunction generateSeed(options = {}) {\n  assert(!options.entropy || options.entropy.length >= 16, 'entropy too short')\n  const entropy = options.entropy ? options.entropy.slice(0, 16) : brorand(16)\n  const type = options.algorithm === 'ed25519' ? 'ed25519' : 'secp256k1'\n  return addressCodec.encodeSeed(entropy, type)\n}\n\nfunction hash(message) {\n  return hashjs.sha512().update(message).digest().slice(0, 32)\n}\n\nconst secp256k1 = {\n  deriveKeypair: function(entropy, options) {\n    const prefix = '00'\n    const privateKey = prefix + derivePrivateKey(entropy, options)\n      .toString(16, 64).toUpperCase()\n    const publicKey = bytesToHex(Secp256k1.keyFromPrivate(\n      privateKey.slice(2)).getPublic().encodeCompressed())\n    return {privateKey, publicKey}\n  },\n  sign: function(message, privateKey) {\n    return bytesToHex(Secp256k1.sign(hash(message),\n      hexToBytes(privateKey), {canonical: true}).toDER())\n  },\n  verify: function(message, signature, publicKey) {\n    return Secp256k1.verify(hash(message), signature, hexToBytes(publicKey))\n  }\n}\n\nconst ed25519 = {\n  deriveKeypair: function(entropy) {\n    const prefix = 'ED'\n    const rawPrivateKey = hash(entropy)\n    const privateKey = prefix + bytesToHex(rawPrivateKey)\n    const publicKey = prefix + bytesToHex(\n      Ed25519.keyFromSecret(rawPrivateKey).pubBytes())\n    return {privateKey, publicKey}\n  },\n  sign: function(message, privateKey) {\n    // caution: Ed25519.sign interprets all strings as hex, stripping\n    // any non-hex characters without warning\n    assert(Array.isArray(message), 'message must be array of octets')\n    return bytesToHex(Ed25519.sign(\n      message, hexToBytes(privateKey).slice(1)).toBytes())\n  },\n  verify: function(message, signature, publicKey) {\n    return Ed25519.verify(message, hexToBytes(signature),\n      hexToBytes(publicKey).slice(1))\n  }\n}\n\nfunction select(algorithm) {\n  const methods = {'ecdsa-secp256k1': secp256k1, ed25519}\n  return methods[algorithm]\n}\n\nfunction deriveKeypair(seed, options) {\n  const decoded = addressCodec.decodeSeed(seed)\n  const algorithm = decoded.type === 'ed25519' ? 'ed25519' : 'ecdsa-secp256k1'\n  const method = select(algorithm)\n  const keypair = method.deriveKeypair(decoded.bytes, options)\n  const messageToVerify = hash('This test message should verify.')\n  const signature = method.sign(messageToVerify, keypair.privateKey)\n  if (method.verify(messageToVerify, signature, keypair.publicKey) !== true) {\n    throw new Error('derived keypair did not generate verifiable signature')\n  }\n  return keypair\n}\n\nfunction getAlgorithmFromKey(key) {\n  const bytes = hexToBytes(key)\n  return (bytes.length === 33 && bytes[0] === 0xED) ?\n    'ed25519' : 'ecdsa-secp256k1'\n}\n\nfunction sign(messageHex, privateKey) {\n  const algorithm = getAlgorithmFromKey(privateKey)\n  return select(algorithm).sign(hexToBytes(messageHex), privateKey)\n}\n\nfunction verify(messageHex, signature, publicKey) {\n  const algorithm = getAlgorithmFromKey(publicKey)\n  return select(algorithm).verify(hexToBytes(messageHex), signature, publicKey)\n}\n\nfunction deriveAddressFromBytes(publicKeyBytes) {\n  return addressCodec.encodeAccountID(\n    utils.computePublicKeyHash(publicKeyBytes))\n}\n\nfunction deriveAddress(publicKey) {\n  return deriveAddressFromBytes(hexToBytes(publicKey))\n}\n\nfunction deriveNodeAddress(publicKey) {\n  const generatorBytes = addressCodec.decodeNodePublic(publicKey)\n  const accountPublicBytes = accountPublicFromPublicGenerator(generatorBytes)\n  return deriveAddressFromBytes(accountPublicBytes)\n}\n\nmodule.exports = {\n  generateSeed,\n  deriveKeypair,\n  sign,\n  verify,\n  deriveAddress,\n  deriveNodeAddress\n}\n"]}